#!/usr/bin/python3

import subprocess
from json import loads
import sys, pathlib
import time

topdir = pathlib.Path(__file__).resolve().parent.parent
sys.path.append(str(topdir))
sys.path.append(str(topdir / 'vendor'))

from lilac2.const import mydir

from myutils import humantime

def c(n):
  return f'\x1b[38;5;{n}m'

FMT = {
  'successful': f'[{c(12)}%(ts)s{c(7)}] {c(15)}%(pkgbase)s{c(7)} %(nv_version)s %(action)s{c(7)} as {c(15)}%(pkg_version)s{c(7)} in {c(6)}%(elapsed)s\n',
  'staged': f'[{c(12)}%(ts)s{c(7)}] {c(15)}%(pkgbase)s{c(7)} %(nv_version)s %(action)s{c(7)} as {c(15)}%(pkg_version)s{c(7)} in {c(6)}%(elapsed)s\n',
  'failed': f'[{c(12)}%(ts)s{c(7)}] {c(15)}%(pkgbase)s{c(7)} %(nv_version)s %(action)s{c(7)} to build as {c(15)}%(pkg_version)s{c(7)} in {c(6)}%(elapsed)s%(exception)s\n',
  'skipped': f'[{c(12)}%(ts)s{c(7)}] {c(15)}%(pkgbase)s{c(7)} %(nv_version)s %(action)s{c(7)} because {c(15)}%(msg)s\n',
  'lilac.py error': f'[{c(12)}%(ts)s{c(7)}] {c(9)}lilac.py error{c(7)} with {c(15)}%(pkgbase)s%(exception)s\n',
  '_': f'[{c(12)}%(ts)s{c(7)}] {c(14)}%(event)s\n'
}

ACTION = {
  'successful': f'{c(10)}built',
  'staged': f'{c(12)}staged',
  'failed': f'{c(9)}failed',
  'skipped': f'{c(3)}skipped',
}

def pretty_print(line):
  log = loads(line)

  if 'ts' in log:
    log['ts'] = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(log['ts']))
  else:
    log['ts'] = 'YYYY-MM-DD HH:MM:SS'

  if 'elapsed' in log:
    log['elapsed'] = humantime(log['elapsed'])
  else:
    log['elapsed'] = '(unknown)'

  if 'exception' in log:
    # multiple line highlight doesn't work well with less
    x = log['exception'].splitlines()[-1]
    log['exception'] = f'\n{c(8)}{x}'
  else:
    log['exception'] = ''

  if 'pkg_version' not in log:
    log['pkg_version'] = 'None-None'

  if 'nv_version' not in log:
    log['nv_version'] = 'None'

  if 'pkgbase' not in log:
    log['pkgbase'] = ''

  log['action'] = ACTION.get(log['event'], None)

  fmt = FMT.get(log['event'], FMT['_'])
  out = c(7) + fmt % log
  sys.stdout.write(out)

def main():
  buildlog = mydir / 'build-log.json'
  cmd = ['tail', '-n40', '-f', buildlog]

  # debug
  # buildlog = pathlib.Path('~/tmpfs/build-log.json').expanduser()
  # cmd = ['cat', buildlog]

  tailf = subprocess.Popen(
    cmd,
    stdout = subprocess.PIPE,
    bufsize = 1,
    text = True,
  )

  for line in tailf.stdout:
    pretty_print(line)

if __name__ == '__main__':
  try:
    main()
  except BrokenPipeError:
    sys.exit(32)
  except KeyboardInterrupt:
    sys.exit(130)
